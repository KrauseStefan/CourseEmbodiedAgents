package dk.au.LEGO;

import java.awt.BorderLayout;
import java.awt.GridLayout;
import java.awt.TextField;
import java.awt.event.*;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JLabel;

import org.jfree.chart.plot.ThermometerPlot;

import lejos.pc.comm.*;

import java.io.*;

/**
 * A GUI that makes it possible to establish a Bluetooth connection to an NXT
 * controlled car. The car is then controlled by a power and duration value sent
 * to the car. The tacho counter value is received and displayed after each
 * command to the car has been performed.
 * 
 * @author Ole Caprani 24.2.12
 * 
 * 
 */
public class PCcarController extends JFrame implements ActionListener {
	private TextField nameField = new TextField(12);
	private TextField addressField = new TextField(20);

	private String name = "failbot";
	private String address = "0016530702bc";

	// private TextField powerField = new TextField(10);
	// private TextField durField = new TextField(10);
	// private TextField countField = new TextField(10);

	private TextField P_Field = new TextField(10);
	private TextField I_Field = new TextField(10);
	private TextField D_Field = new TextField(10);
	private TextField offsetField = new TextField(10);

	private NXTComm nxtComm;
	private NXTInfo nxtInfo;

	private InputStream is;
	private DataInputStream dis; // recive

	private OutputStream os;
	private DataOutputStream dos; // send

	private JButton connectButton = new JButton("Connect");
	private JButton goButton = new JButton("Go");

	/**
	 * Constructor builds GUI
	 */
	public PCcarController() {
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setTitle("Control NXT");
		setSize(500, 300);

		// holds labels and text fields
		JPanel p1 = new JPanel();
		p1.add(new JLabel("Name:"));
		p1.add(nameField);
		nameField.setText(name);
		nameField.setEditable(false);
		p1.add(new JLabel("Address:"));
		p1.add(addressField);
		addressField.setText(address);
		addressField.setEditable(false);

		try {
			nxtComm = NXTCommFactory.createNXTComm(NXTCommFactory.BLUETOOTH);
		} catch (NXTCommException nce) {
		}
		nxtInfo = new NXTInfo();

		// holds connect button
		JPanel p2 = new JPanel();
		p2.add(connectButton);
		connectButton.addActionListener(this);

		// holds labels and text fields
		// JPanel p3 = new JPanel();
		// p3.add(new JLabel("Power:"));
		// p3.add(powerField);
		// powerField.setText("100");
		// p3.add(new JLabel("Dur:"));
		// p3.add(durField);
		// durField.setText("1000");

		// holds labels and text field
		JPanel p3 = new JPanel();
		p3.add(new JLabel("P"));
		p3.add(P_Field);
		p3.add(new JLabel("I"));
		p3.add(I_Field);
		p3.add(new JLabel("D"));
		p3.add(D_Field);
		P_Field.setText("NA");
		I_Field.setText("NA");
		D_Field.setText("NA");

		// holds go button
		JPanel p4 = new JPanel();
		p4.add(goButton);
		goButton.addActionListener(this);

		// holds labels and text field
		JPanel p5 = new JPanel();
		p5.add(new JLabel("offset:"));
		p5.add(offsetField);
		offsetField.setText("NA");

		// // holds labels and text field
		// JPanel p5 = new JPanel();
		// p5.add(new JLabel("Count:"));
		// p5.add(countField);
		// countField.setText("0");

		// North area of the frame
		JPanel panel = new JPanel();
		panel.setLayout(new GridLayout(6, 1));
		panel.add(p1);
		panel.add(p2);
		panel.add(p3);
		panel.add(p4);
		panel.add(p5);
		// panel.add(p6);
		add(panel, BorderLayout.NORTH);

	}

	/**
	 * Required by action listener; only action is generated by the get Length
	 * button
	 */
	public void actionPerformed(ActionEvent e) {
		if (e.getSource() == connectButton) {
			String name = nameField.getText();
			String address = addressField.getText();

			nxtInfo.name = name;
			nxtInfo.deviceAddress = address;

			try {
				nxtComm.open(nxtInfo);
				is = nxtComm.getInputStream();
				os = nxtComm.getOutputStream();
				dis = new DataInputStream(is);
				dos = new DataOutputStream(os);

				System.out.println("Connected!");

				Thread.sleep(200);
				dos.flush();

				float offset = dis.readFloat();
				offsetField.setText("" + offset);
				float p = dis.readFloat();
				P_Field.setText("" + p);
				float i = dis.readFloat();
				I_Field.setText("" + i);
				float d = dis.readFloat();
				D_Field.setText("" + d);

			} catch (Exception ex) {
				System.out.println("Unable to connect, or possible resive values");
			}

		}

		if (e.getSource() == goButton) {
			try {
				String offsetString = offsetField.getText().trim();
				String pString = P_Field.getText().trim();
				String iString = I_Field.getText().trim();
				String dString = D_Field.getText().trim();
				
				float o = new Float(offsetString).floatValue();
				float p = new Float(pString).floatValue();
				float i = new Float(iString).floatValue();
				float d = new Float(dString).floatValue();

				dos.writeFloat(o);
				dos.flush();
				dos.writeFloat(p);
				dos.flush();
				dos.writeFloat(i);
				dos.flush();
				dos.writeFloat(d);
				dos.flush();

				System.out.println("PID and offset parameters sent.");

				// String freqString = powerField.getText();
				// int freq = new Integer(freqString).intValue();
				// dos.writeInt(freq);
				// dos.flush();
				//
				// String durString = durField.getText();
				// int dur = new Integer(durString).intValue();
				// dos.writeInt(dur);
				// dos.flush();
				// int count = dis.readInt();
				// countField.setText("  " + count);
			} catch (Exception ex) {
				System.out.println("Error sending data.");
			}

		}
	}

	/**
	 * Initialize the display Frame
	 */
	public static void main(String[] args) {
		PCcarController frame = new PCcarController();
		frame.setVisible(true);
	}
}